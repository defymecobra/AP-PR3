Завдання 1:
Різниця в часі виконання між Work stealing (Fork/Join Framework) і Work dealing (ExecutorService) залежить від характеру задачі. Work stealing добре працює в задачах із нерівномірним навантаженням, оскільки потоки автоматично перехоплюють завдання один у одного, але це може бути повільніше для задач із малими розмірами або рівномірним навантаженням через накладні витрати на розбиття задач. Work dealing забезпечує швидший розподіл у задачах із рівномірним навантаженням, але його ефективність знижується у випадку нерівномірного розподілу роботи, коли потоки простоюють. У задачі множення матриць для великих і рівномірних матриць обидва підходи можуть показати схожий час, але Work dealing часто виграє за рахунок простішої архітектури. Для нерівномірного розподілу завдань Work stealing зазвичай демонструє кращу продуктивність завдяки динамічному балансуванню роботи.

Завдання 2:
У моїй версії реалізовано два варіанти виконання: Work stealing (Fork/Join Framework) і Work dealing (ExecutorService). На мою думку, кращим буде варіант з використанням Fork/Join Framework, оскільки він дозволяє автоматично балансувати навантаження між потоками, що особливо важливо при нерівномірному розподілі роботи, наприклад, під час рекурсивного обходу вкладених директорій. Цей підхід забезпечує високу гнучкість і ефективність у складних задачах, де підзадачі можуть значно відрізнятися за обсягом роботи. Хоча Work dealing простіший у реалізації та часто швидший для рівномірних задач, він менш адаптивний, оскільки потоки не можуть динамічно перехоплювати завдання один у одного. Тому для задачі з нерівномірним обсягом роботи Fork/Join Framework є оптимальним вибором.